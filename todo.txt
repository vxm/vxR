TODO:

- Rework getNearestCollision for optimization.
	- HasCollission skips some boxes.
	- fix errors
		- boxes not seen in the right side.
			- find the cause of the problem.
		- boundary (edges) boxes are not drawn complete
			- find the cause of the problem.
		- raytrace will work in world and grid space.
	* investigate plane values for ray traveling.
	* do x, y and z, not only z
	* find dominant axis in ray
	* complete block visualization, and create a tag version.
	* LAST execute with valgrind again.

- Multithreading.
	- create ray machine sender in scene to use with threads.

- Optimize ray travel.
	- not in grid
	- get only one axis when only one is needed (ray intersect)
	
- Shaders:
	* Lumminance + shaders, rework.
	- create standard shader
		- provide simple shading
		* angular shading
	  * decouple lambert shader with texture
	  * shadows.
		* Raytrace shadows.  
	* multiple lights
	- Ingelligent subsampling.
	- Reflection, Refraction, and Diffraction
		(http://www.physicsclassroom.com/class/waves/Lesson-3/Reflection,-Refraction,-and-Diffraction)
	* Global illumination.
	- Subsurface scattering.

- Textures
	- implement ramp and lookup tables

- Camera:
	- Rework subsamples.
		- need to be more clever.

- General
	* Better statistics, c++11 chrono.
	* Deploy time over processes.
	
- BUGS:
  - Get rid of black lines in render.
    - swap image resolution to aperture for ray generation.
  * Get rid of OLD warnings, to 0.
  - Left holes at the left side of the grid.  

- Improvements
  - Improve memory usage for vxGrid.
  - Volumes.
  - Profiling:
    - Get rid of; tangent operations. or cache them.

- Maths 
  - implement correct random noise distribution in hollow and 
  solid spheres.
  - Implement m44 inversion.
  - Quaternions (for camera rotation).

* Remove Boost dependencies.
- General raytracing, and not only from camera.
	- investigate pointer advance patern for traveling rays.

- Geometry
	* Download Standford models.
	* Create PLY importer.




